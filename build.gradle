plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.google.protobuf' version '0.9.1'
}

group = 'com.bowmeow'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// modelMapper 의존성
	implementation 'org.modelmapper:modelmapper:3.1.1'

	// grpc 설정
	implementation 'io.grpc:grpc-netty-shaded:1.56.0'
	implementation 'io.grpc:grpc-protobuf:1.56.0'
	implementation 'io.grpc:grpc-stub:1.56.0'
	implementation 'io.grpc:grpc-netty:1.56.0'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'

	// grpc 테스트 의존성 추가
	testImplementation 'io.grpc:grpc-netty-shaded:1.56.0'
	testImplementation 'io.grpc:grpc-protobuf:1.56.0'
	testImplementation 'io.grpc:grpc-stub:1.56.0'
	testImplementation 'io.grpc:grpc-netty:1.56.0'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

tasks.withType(ProcessResources).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.21.7"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:1.56.0"
		}
	}
	generateProtoTasks {
		all().each { task ->
			task.plugins {
				grpc {}
			}
		}
	}
}

sourceSets {
	main {
		proto {
			srcDir 'src/main/proto'
		}
		java {
			srcDirs 'src/main/java', 'build/generated/source/proto/main/java', 'build/generated/source/proto/main/grpc'
		}
		resources {
			srcDirs = ['src/main/resources']
			exclude 'src/main/proto/**'
		}
	}
}
